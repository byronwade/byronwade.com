"use client";

import React, { useState, useMemo, useEffect } from "react";
import Link from "next/link";
import { ExternalLink, Github, Calendar, Code, Star, GitFork, ArrowRight } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { DribbbleShot } from "@/types/dribbble";
import { FigmaFile, GitHubProfile, GitHubRepo } from "@/lib/portfolio-data";
import Image from "next/image";

// Clean, minimal project card with dark mode support
const ProjectCard = ({ repo }: { repo: GitHubRepo }) => {
	const title = repo.name
		.split("-")
		.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
		.join(" ");

	return (
		<Card className="group hover:shadow-xl transition-all duration-300 border-yellow-500/20 hover:border-yellow-500/40 bg-white/10 backdrop-blur-sm hover:bg-white/20">
			<CardHeader className="pb-3">
				<div className="flex items-start justify-between">
					<div className="space-y-1">
						<CardTitle className="text-lg text-white group-hover:text-yellow-500 transition-colors">
							<Link href={`/portfolio/github/${repo.name}`} className="hover:underline">
								{title}
							</Link>
						</CardTitle>
						<div className="flex items-center gap-3 text-sm text-gray-400">
							<div className="flex items-center gap-1">
								<Star className="w-3 h-3" />
								<span>{repo.stargazers_count}</span>
							</div>
							<div className="flex items-center gap-1">
								<GitFork className="w-3 h-3" />
								<span>{repo.forks_count}</span>
							</div>
							{repo.language && (
								<Badge variant="secondary" className="text-xs bg-yellow-500/20 border border-yellow-500/40 text-yellow-500">
									{repo.language}
								</Badge>
							)}
						</div>
					</div>
					<Code className="w-5 h-5 text-yellow-500" />
				</div>
			</CardHeader>
			<CardContent className="pt-0">
				<p className="text-gray-300 text-sm mb-4 line-clamp-2">{repo.description || "No description available"}</p>

				{repo.topics && repo.topics.length > 0 && (
					<div className="flex flex-wrap gap-1 mb-4">
						{repo.topics.slice(0, 3).map((topic) => (
							<Badge key={topic} variant="outline" className="text-xs border-yellow-500/30 text-gray-400 hover:border-yellow-500/60 hover:text-yellow-500 transition-colors">
								{topic}
							</Badge>
						))}
					</div>
				)}

				<div className="flex items-center justify-between">
					<div className="flex items-center gap-2">
						<Button size="sm" variant="outline" asChild className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
							<a href={repo.html_url} target="_blank" rel="noopener noreferrer">
								<Github className="w-3 h-3 mr-1" />
								Code
							</a>
						</Button>
						{repo.homepage && (
							<Button size="sm" asChild className="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold">
								<a href={repo.homepage} target="_blank" rel="noopener noreferrer">
									<ExternalLink className="w-3 h-3 mr-1" />
									Live
								</a>
							</Button>
						)}
					</div>
					<span className="text-xs text-gray-400">{new Date(repo.updated_at).toLocaleDateString()}</span>
				</div>
			</CardContent>
		</Card>
	);
};

const DesignCard = ({ shot }: { shot: DribbbleShot }) => {
	return (
		<Card className="group hover:shadow-xl transition-all duration-300 border-yellow-500/20 hover:border-yellow-500/40 bg-white/10 backdrop-blur-sm hover:bg-white/20 overflow-hidden">
			<div className="aspect-[4/3] relative overflow-hidden bg-gray-800">
				<Image src={shot.images.normal || shot.images.teaser} alt={shot.title} fill className="object-cover group-hover:scale-105 transition-transform duration-300" sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" />
			</div>
			<CardHeader className="pb-2">
				<CardTitle className="text-lg text-white group-hover:text-yellow-500 transition-colors line-clamp-1">
					<Link href={`/portfolio/dribbble/${shot.id}`} className="hover:underline">
						{shot.title}
					</Link>
				</CardTitle>
			</CardHeader>
			<CardContent className="pt-0">
				<div className="flex items-center justify-between">
					<Badge variant="secondary" className="text-xs bg-yellow-500/20 border border-yellow-500/40 text-yellow-500">
						Design
					</Badge>
					<span className="text-xs text-gray-400">{new Date(shot.published_at).toLocaleDateString()}</span>
				</div>
			</CardContent>
		</Card>
	);
};

const PrototypeCard = ({ file }: { file: FigmaFile }) => {
	return (
		<Card className="group hover:shadow-xl transition-all duration-300 border-yellow-500/20 hover:border-yellow-500/40 bg-white/10 backdrop-blur-sm hover:bg-white/20 overflow-hidden">
			<div className="aspect-[4/3] relative overflow-hidden bg-gray-800">
				<Image src={file.thumbnail_url} alt={file.name} fill className="object-cover group-hover:scale-105 transition-transform duration-300" sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" />
			</div>
			<CardHeader className="pb-2">
				<CardTitle className="text-lg text-white group-hover:text-yellow-500 transition-colors line-clamp-1">
					<Link href={`/portfolio/figma/${file.key}`} className="hover:underline">
						{file.name}
					</Link>
				</CardTitle>
			</CardHeader>
			<CardContent className="pt-0">
				<div className="flex items-center justify-between">
					<Badge variant="secondary" className="text-xs bg-yellow-500/20 border border-yellow-500/40 text-yellow-500">
						Figma
					</Badge>
					<span className="text-xs text-gray-400">{new Date(file.last_modified).toLocaleDateString()}</span>
				</div>
			</CardContent>
		</Card>
	);
};

type Project = (GitHubRepo & { type: "repo" }) | (DribbbleShot & { type: "shot" }) | (FigmaFile & { type: "figma" });
type FilterType = "all" | "repo" | "shot" | "figma";

const ITEMS_PER_PAGE = 12;

export default function PortfolioClientPage({ repos, shots, figmaFiles, profile, readme, stats, error }: { repos: GitHubRepo[]; shots: DribbbleShot[]; figmaFiles: FigmaFile[]; profile: GitHubProfile | null; readme: string | null; stats: any; error: string | null }) {
	const [filter, setFilter] = useState<FilterType>("all");
	const [visibleItems, setVisibleItems] = useState(ITEMS_PER_PAGE);

	// Separate visible counts for each section
	const [visibleRepos, setVisibleRepos] = useState(6);
	const [visibleShots, setVisibleShots] = useState(6);
	const [visibleFigma, setVisibleFigma] = useState(6);

	const allProjects: Project[] = useMemo(() => {
		const projects: Project[] = [...repos.map((repo) => ({ ...repo, type: "repo" as const })), ...shots.map((shot) => ({ ...shot, type: "shot" as const })), ...figmaFiles.map((file) => ({ ...file, type: "figma" as const }))];

		projects.sort((a, b) => {
			let dateA: Date;
			let dateB: Date;

			if (a.type === "repo") dateA = new Date(a.updated_at);
			else if (a.type === "shot") dateA = new Date(a.published_at);
			else dateA = new Date(a.last_modified);

			if (b.type === "repo") dateB = new Date(b.updated_at);
			else if (b.type === "shot") dateB = new Date(b.published_at);
			else dateB = new Date(b.last_modified);

			return dateB.getTime() - dateA.getTime();
		});

		return projects;
	}, [repos, shots, figmaFiles]);

	const filteredProjects = useMemo(() => {
		if (filter === "all") {
			return allProjects;
		}
		return allProjects.filter((p) => p.type === filter);
	}, [allProjects, filter]);

	const loadMore = () => {
		setVisibleItems((prev) => prev + ITEMS_PER_PAGE);
	};

	const loadMoreRepos = () => {
		setVisibleRepos((prev) => prev + 6);
	};

	const loadMoreShots = () => {
		setVisibleShots((prev) => prev + 6);
	};

	const loadMoreFigma = () => {
		setVisibleFigma((prev) => prev + 6);
	};

	// Reset visible counts when switching away from "all" filter
	useEffect(() => {
		if (filter !== "all") {
			setVisibleRepos(6);
			setVisibleShots(6);
			setVisibleFigma(6);
		}
	}, [filter]);

	if (error) {
		return (
			<div className="min-h-screen bg-white dark:bg-gray-950 py-16">
				<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div className="text-center">
						<h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">Portfolio</h1>
						<p className="text-red-600 dark:text-red-400">{error}</p>
					</div>
				</div>
			</div>
		);
	}

	return (
		<div className="min-h-screen bg-black py-16">
			<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				{/* Hero Section */}
				<div className="text-center mb-16">
					<h1 className="text-4xl md:text-5xl font-bold text-white mb-6">My Portfolio</h1>
					<p className="text-xl text-gray-300 max-w-3xl mx-auto mb-8">A collection of projects, designs, and prototypes showcasing my work in development and design.</p>

					<div className="flex flex-wrap justify-center gap-6 text-sm text-gray-400">
						<div className="flex items-center gap-2">
							<Code className="w-4 h-4 text-yellow-500" />
							<span>{repos.length} Code Projects</span>
						</div>
						<div className="flex items-center gap-2">
							<span className="w-4 h-4 rounded bg-yellow-500"></span>
							<span>{shots.length} Design Works</span>
						</div>
						<div className="flex items-center gap-2">
							<span className="w-4 h-4 rounded bg-yellow-500"></span>
							<span>{figmaFiles.length} Prototypes</span>
						</div>
					</div>
				</div>

				{/* Filter Navigation */}
				<div className="flex flex-wrap justify-center gap-2 mb-12">
					{(["all", "repo", "shot", "figma"] as FilterType[]).map((filterType) => (
						<Button key={filterType} variant={filter === filterType ? "default" : "outline"} size="sm" onClick={() => setFilter(filterType)} className={filter === filterType ? "bg-yellow-500 hover:bg-yellow-600 text-black font-semibold" : "border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors"}>
							{filterType === "all" && "All Projects"}
							{filterType === "repo" && "Code Projects"}
							{filterType === "shot" && "Design Work"}
							{filterType === "figma" && "Prototypes"}
						</Button>
					))}
				</div>

				{/* All Filter - Show individual sections */}
				{filter === "all" && (
					<div className="space-y-16">
						{/* Code Projects Section */}
						{repos.length > 0 && (
							<section>
								<div className="flex items-center justify-between mb-8">
									<h2 className="text-2xl font-bold text-white flex items-center gap-2">
										<Code className="w-6 h-6 text-yellow-500" />
										Code Projects
									</h2>
									<Button variant="outline" size="sm" onClick={() => setFilter("repo")} className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
										View All <ArrowRight className="w-3 h-3 ml-1" />
									</Button>
								</div>
								<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
									{repos.slice(0, visibleRepos).map((repo) => (
										<ProjectCard key={repo.id} repo={repo} />
									))}
								</div>
								{visibleRepos < repos.length && (
									<div className="text-center mt-8">
										<Button onClick={loadMoreRepos} variant="outline" className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
											Load More Code Projects
										</Button>
									</div>
								)}
							</section>
						)}

						{/* Design Work Section */}
						{shots.length > 0 && (
							<section>
								<div className="flex items-center justify-between mb-8">
									<h2 className="text-2xl font-bold text-white flex items-center gap-2">
										<span className="w-6 h-6 rounded bg-yellow-500"></span>
										Design Work
									</h2>
									<Button variant="outline" size="sm" onClick={() => setFilter("shot")} className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
										View All <ArrowRight className="w-3 h-3 ml-1" />
									</Button>
								</div>
								<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
									{shots.slice(0, visibleShots).map((shot) => (
										<DesignCard key={shot.id} shot={shot} />
									))}
								</div>
								{visibleShots < shots.length && (
									<div className="text-center mt-8">
										<Button onClick={loadMoreShots} variant="outline" className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
											Load More Designs
										</Button>
									</div>
								)}
							</section>
						)}

						{/* Prototypes Section */}
						{figmaFiles.length > 0 && (
							<section>
								<div className="flex items-center justify-between mb-8">
									<h2 className="text-2xl font-bold text-white flex items-center gap-2">
										<span className="w-6 h-6 rounded bg-yellow-500"></span>
										Prototypes
									</h2>
									<Button variant="outline" size="sm" onClick={() => setFilter("figma")} className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
										View All <ArrowRight className="w-3 h-3 ml-1" />
									</Button>
								</div>
								<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
									{figmaFiles.slice(0, visibleFigma).map((file) => (
										<PrototypeCard key={file.key} file={file} />
									))}
								</div>
								{visibleFigma < figmaFiles.length && (
									<div className="text-center mt-8">
										<Button onClick={loadMoreFigma} variant="outline" className="border-yellow-500/50 hover:bg-yellow-500 hover:text-black text-yellow-500 transition-colors">
											Load More Prototypes
										</Button>
									</div>
								)}
							</section>
						)}
					</div>
				)}

				{/* Filtered Results */}
				{filter !== "all" && (
					<div>
						<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
							{filteredProjects.slice(0, visibleItems).map((project) => {
								if (project.type === "repo") {
									return <ProjectCard key={`repo-${project.id}`} repo={project} />;
								} else if (project.type === "shot") {
									return <DesignCard key={`shot-${project.id}`} shot={project} />;
								} else {
									return <PrototypeCard key={`figma-${project.key}`} file={project} />;
								}
							})}
						</div>

						{visibleItems < filteredProjects.length && (
							<div className="text-center mt-12">
								<Button onClick={loadMore} variant="outline" size="lg" className="border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300">
									Load More
								</Button>
							</div>
						)}

						{filteredProjects.length === 0 && (
							<div className="text-center py-16">
								<p className="text-gray-500 dark:text-gray-400">No projects found for this filter.</p>
							</div>
						)}
					</div>
				)}
			</div>
		</div>
	);
}
